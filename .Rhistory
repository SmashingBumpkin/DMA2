newguy <- c(140.123,100) #data.frame(height = 140, weight = 100)
hw <- rbind(hw,newguy)
hw
age <- rnorm(12,25,2)
hw$age <- age
hw
hw$age <- age #or cbind(hw,age)
hw
cbind(hw,age)
my_funct("Jeff")
my_funct <- function(arg){
#do Stuff
arg+1
}
my_funct("Jeff")
my_funct(2)
my_funct <- function(arg){ #function syntax
#do Stuff
return arg**2
my_funct("Jeff") #throws error since requires number
#do Stuff
return(arg**2)
my_funct <- function(arg){ #function syntax
#do Stuff
return(arg**2)
}
my_funct("Jeff") #throws error since requires number
my_funct(2)
my_funct(3)
my_funct <- function(arg = 2){ #function syntax
#do Stuff
print("Im functioning")
return(arg**2)
}
my_funct("Jeff") #throws error since requires number
my_funct(3)
my_funct()
#CLASSES---------------------------------------
histo <- hist(iris$Sepal.Length)
str(hist)
str(histo)
class(histo)
summary(histo)
a <- lm(iris$Sepal.Length~iris$Sepal.Width)
str(a)
a <- lm(iris$Sepal.Length~iris$Sepal.Width)
str(a)
# creates a linear model relating length to width
str(a)
summary(a)
plot(a)
plot(a)
plot(a)
plot(a)
plot(iris)
#Loops In R...grudgingly.
#if-----------------------------------------
if (1 == 1){
a <- TRUE
} else {
a <- FALSE
}
#else if
b <- 11
if (b%%2 == 0){
print("even")
} else if (b%%3 == 0){
print("divisible by 3")
} else {
print("crappy number")
}
x <- 2
while (x < 5){
print("hello")
x <- x + 1
}
#for-----------------------------------------
#what do you think this will output?
for (i in 1:10){
print(paste0(rep("!",i)))
}
i <- 1:20
j <- rep(NA,length(i))
#instead of...
for (n in i){
j[i] <- i*11
}
#try...
j <- i*11
#instead of...
letters <- c("a","b", "c","d","e","f","g","h","i","j","k")
vowLets <- c()
vowels <- c("a","e","i","o","u")
for (let in letters){
if (let %in% vowels){
vowLets <- c(vowLets,TRUE) #WARNING: memory inefficient
} else {
vowLets <- c(vowLets, FALSE) #WARNING: memory inefficient
}
}
#try...
vowLets2 <- ifelse(letters %in% vowels, TRUE, FALSE)
vowLets2
#apply()-------------------------------------
mat <- matrix(c(1,2,3,4,7,4,2,5,7), nrow = 3)
apply(mat,2,mean)
my_fun <- function(column){
return(max(column))
}
apply(mat,1,my_fun)
age <- round(rnorm(10,40,10)) #years
height <- round(rnorm(10,140,20)) #cm?
weight <- round(rnorm(10,170,35)) #lbs
people <- data.frame(age = age, height = height, weight = weight)
head(people)
lapply(people,mean) #note, returns a LIST
apply(peopleMAT,2,mean) #not a list!
peopleMAT <- as.matrix(people)
peopleMAT
apply(peopleMAT,2,mean) #not a list!
q1 = c(200, 70, 88, 130, 175, 89, 95, 120, 400, 55)
range = max(q1)-min(q1)
source("~/GitHub/DMA2/StatsEs2.R", echo=TRUE)
xbar = sum(q1)/length(q1)
xbar
dx = q1 - xbar #deviations
dx
out = cbind(q1,dq1)
dq1 = q1 - xbar #deviations
out = cbind(q1,dq1)
sd(q1)
x = c(35, 32, 16, 66,22,46,32)
xbar = mean(x)
dxi = x - xbar
cbind(x, dxi)
cbind(x, dxi, dxi^2)
colSums(out)
colSums(out)
colSums(out)
colSums(out)
x = c(35, 32, 16, 66,22,46,32)
xbar = mean(x)
dxi = x - xbar
out = round(cbind(x, dxi, dxi^2),2)
colSums(out)
1627.73/6
sqrt(1627.73/6)
#e2 q3
x = c( 57, 35, 61, 64, 90, 78, 60, 53, 55, 57, 71, 30)
xsorted = sort(x)
xsorted
median(x)
q1(x)
# Libraries
# Load the necessary libraries for the script
# The 'datasets' library provides access to various built-in datasets in R,
# allowing us to easily load and work with these datasets.
library(datasets)
# The 'MASS' library contains functions related to statistical modeling, such as
# fitting linear and generalized linear models, clustering, and more.
library(MASS)
# The 'ggplot2' library is a powerful data visualization library in R,
# which enables the creation of high-quality and customizable plots and charts.
library(ggplot2)
# mtcars dataset
# Display the first few rows of the mtcars dataset
# The 'mtcars' dataset is a built-in dataset in R, which contains information
# about various car models. By using the 'head()' function, we can view the
# first few rows of the dataset to get a quick overview of its structure and contents.
head(mtcars)
length(mtcars)
length(mtcars%mpg)
length(mtcars$mpg)
mtcars
summary(mtcars$mpg)
summary(mtcars)
plot(density(mtcars$mpg))
plot(mtcars$mpg, mtcars$wt, main = "MPG vs Weight", xlab = "Miles per Gallon", ylab = "Weight")
hist(mtcars$mpg, main = "Histogram of Miles per Gallon", xlab = "Miles per Gallon", ylab = "Count")
t.test(mtcars$mpg ~ mtcars$am, var.equal = TRUE)
t.sim <- function(v1, v2, ns, lim) {
n <- 50000  # The number of iterations to simulate the distribution of sample means
sds <- sd(c(v1, v2))  # Calculate the standard deviation of the combined samples
mu <- mean(c(v1, v2))  # Calculate the mean of the combined samples
meanDIFF <- rep(NA, n)  # Initialize an empty vector to store the differences in sample means
# Perform the simulation of sample means
for (i in 1:n) {
g <- rnorm(ns, mu, sds)  # Generate a random sample 'g' from a normal distribution with mean 'mu' and standard deviation 'sds'
k <- rnorm(ns, mu, sds)  # Generate another random sample 'k' from the same distribution
meanDIFF[i] <- mean(g) - mean(k)  # Calculate the difference in sample means and store it in the vector
}
# Plotting the histogram of the differences in sample means
hist(meanDIFF, xlim = c(-lim, lim))  # Create a histogram to visualize the distribution of sample means
ourDIFF <- mean(v1) - mean(v2)  # Calculate the difference in means for the original samples
segments(ourDIFF, 0, ourDIFF, 10000, col = "red")  # Add a red vertical line to the histogram representing the difference in means of the original samples
}
t.sim(
mtcars[mtcars$am == 0, "mpg"],  # Select 'mpg' values for the group with automatic transmission
mtcars[mtcars$am == 1, "mpg"],  # Select 'mpg' values for the group with manual transmission
20,  # Set the sample size for each iteration to 20
10   # Set the range of the x-axis in the histogram to -10 to 10
)
gg <- ggplot(mtcars, aes(x = mpg, y = wt, color = factor(cyl)))
gg <- ggplot(mtcars, aes(x = mpg, y = wt, color = factor(cyl)))
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight")
gg + geom_point()
gg
install.packages("farver")
gg <- ggplot(mtcars, aes(x = mpg, y = wt, color = factor(cyl)))
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight")
######EXERCISE 1
#Linear Regression Exercise:
#Perform a linear regression analysis using MPG as the dependent variable
#and weight (wt) as the independent variable.
#Provide an interpretation of the coefficients
a <- lm(mtcars$mpg~mtcars$wt)
summary(a)
plot(a)
plot(a)
plot(a)
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight")
print(line)
line = gg +  geom_abline(intercept = 37 * 5, slope = -5, color = "red")
print(line)
gg <- ggplot(mtcars, aes(x = mpg, y = wt, color = factor(cyl)))
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight")
gg <- ggplot(mtcars, aes(x = mpg, y = wt, color = factor(cyl)))
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight")
line = gg +  geom_abline(intercept = 37 * 5, slope = -5, color = "red")
print(line)
gg <- ggplot(mtcars, aes(x = mpg, y = wt, color = factor(cyl)))
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight")
line = gg +  geom_abline(intercept = 37 * 5, slope = -5, color = "red")
print(line)
gg <- ggplot(mtcars, aes(x = mpg, y = wt, color = factor(cyl)))
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight") +
geom_abline(intercept = 37 * 5, slope = -5, color = "red")
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight") +
geom_abline(intercept = 7, slope = -5, color = "red")
gg <- ggplot(mtcars, aes(x = mpg, y = wt, color = factor(cyl)))
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight") +
geom_abline(intercept = 7, slope = -5, color = "red")
summary(a)
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight") +
geom_abline(intercept = 7, slope = -.2, color = "red")
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight") +
geom_abline(intercept = 7, slope = -1/5.3, color = "red")
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight") +
geom_abline(intercept = 0 + 37.2851/5.3445, slope = -1/5.3, color = "red")
######EXERCISE 1
#Linear Regression Exercise:
#Perform a linear regression analysis using MPG as the dependent variable
#and weight (wt) as the independent variable.
#Provide an interpretation of the coefficients
a <- lm(mtcars$mpg~mtcars$wt)
gg + geom_point() +
# Customize plot labels
# 'labs' function is used to customize the plot labels.
# 'title = "MPG vs Weight"' sets the title of the plot as "MPG vs Weight",
# 'x = "Miles per Gallon"' sets the label for the x-axis as "Miles per Gallon",
# 'y = "Weight"' sets the label for the y-axis as "Weight".
labs(title = "MPG vs Weight", x = "Miles per Gallon", y = "Weight") +
geom_abline(intercept = 0 + 37.2851/5.3445, slope = -1/5.3, color = "red")
mygg <- ggplot(mtcars,aes(x = hp/wt, y= qsec, col=am))
mygg
mygg + geom_point()
# Load required libraries
library(ggplot2)  # For creating visualizations
library(reshape2) # For reshaping data
install.packages('reshape2')
library(ggplot2)  # For creating visualizations
library(reshape2) # For reshaping data
# Dataset: Iris
data(iris)
# Histogram
hist(iris$Sepal.Length, main = "Histogram", xlab = "Sepal Length", ylab = "Frequency")
ggplot(data.frame(x = iris$Sepal.Length), aes(x = x)) +
stat_function(fun = dnorm, args = list(mean = mean(iris$Sepal.Length), sd = sd(iris$Sepal.Length)), color = "blue") +
labs(title = "PDF", x = "Sepal Length", y = "Density")
# Cumulative Density Function (CDF)
ggplot(data.frame(x = iris$Sepal.Length), aes(x = x)) +
stat_function(fun = pnorm, args = list(mean = mean(iris$Sepal.Length), sd = sd(iris$Sepal.Length)), color = "red") +
labs(title = "CDF", x = "Sepal Length", y = "Probability")
# Complementary Cumulative Density Function (CCDF)
ggplot(data.frame(x = iris$Sepal.Length), aes(x = x)) +
stat_function(fun = function(x) 1 - pnorm(x, mean = mean(iris$Sepal.Length), sd = sd(iris$Sepal.Length)), color = "green") +
labs(title = "CCDF", x = "Sepal Length", y = "Probability")
# Box plot
boxplot(iris$Sepal.Length, main = "Box Plot")
qqline(iris$Sepal.Length)
qqnorm(iris$Sepal.Length)
qqline(iris$Sepal.Length)
---
title: "test"
---
title: "test"
---
title: "test"
head(seg.df)
seg.df  <- seg.raw[ , -7]     # remove the known segment assignments
head(seg.df)
sef.raw <- read.csv('http://goo.gl/qw303p')
seg.df  <- seg.raw[ , -7]     # remove the known segment assignments
head(seg.raw)
head(sef.raw)
seg.raw <- read.csv('http://goo.gl/qw303p')
head(seg.raw)
plot(density(seg.raw$income))
seg.df <- seg.raw[,-7] #remove column 7
head(seg.df)
seg.summ <- function(data, groups) {
aggregate(data, list(groups), function(x) mean(as.numeric(x)))
}
seg.summ(seg.df, seg.raw$Segment)
c(1,2,3) - c(2,3,2)
[1] -1 -1  1
c(1,2,3) - c(2,3,2)
sum((c(1,2,3) - c(2,3,2))^2)
c(1,2,3) - c(2,3,2)
sum((c(1,2,3) - c(2,3,2))^2)
sqrt(sum((c(1,2,3) - c(2,3,2))^2))
dist(rbind(c(1,2,3), c(2,3,2)))
library(cluster)
seg.dist <- daisy(seg.df)       # daisy works with mixed data types
as.matrix(seg.dist)[1:4, 1:4]
head(seg.df)
seg.qualitative <- seg.df[,-6]
head(qualitative)
head(seg.qualitative)
seg.qualitative <- seg.df[,-5]
head(seg.qualitative)
seg.qualitative <- seg.df[,-2]
head(seg.qualitative)
seg.qualitative <- seg.qualitative
seg.qualitative <- seg.df[,-5]
head(seg.qualitative)
seg.qualitative <- seg.df[,-4]
head(seg.qualitative)
seg.qualitative <- seg.qualitative
head(seg.qualitative)
seg.qualitative <- seg.df[,-4]
seg.qualitative <- seg.df[,-7]
seg.qualitative <- seg.qualitative[,-6]
head(seg.qualitative)
seg.qualitative <- seg.df[,-7]
head(seg.qualitative)
seg.qualitative <- seg.qualitative[,-6]
head(seg.qualitative)
seg.qualitative <- seg.qualitative[,-5]
head(seg.qualitative)
seg.qualitative <- seg.qualitative[,-2]
head(seg.qualitative)
seg.dist <- daisy(seg.df)       # daisy works with mixed data types
seg.dist <- daisy(qualitative)       # daisy works with mixed data types
seg.dist <- daisy(sg.qualitative)       # daisy works with mixed data types
seg.dist <- daisy(seg.qualitative)       # daisy works with mixed data types
as.matrix(seg.dist)[1:4, 1:4]
seg.qualitative <- seg.df[, -c(2, 4:7)]
seg.dist <- daisy(seg.qualitative)       # daisy works with mixed data types
as.matrix(seg.dist)[1:4, 1:4]
seg.quantitative <- seg.df[, -c(2, 4:7)]
seg.dist <- daisy(seg.quantitative)       # daisy works with mixed data types
as.matrix(seg.dist)[1:4, 1:4]
seg.hc <- hclust(seg.quantitative, method="complete")
seg.dist
seg.quantitative <- seg.df[, -c(2, 4:7)]
head(seg.quantitative)
seg.quantitative <- seg.df[, -c(2, 5:7)]
head(seg.quantitative)
seg.dist <- daisy(seg.quantitative)       # daisy works with mixed data types
as.matrix(seg.dist)[1:4, 1:4]
seg.hc <- hclust(seg.dist, method="complete")
plot(seg.hc)
plot(cut(as.dendrogram(seg.hc), h=0.5)$lower[[1]])
seg.df[c(101, 107), ]  # similar
seg.df[c(278, 294), ]  # similar
seg.df[c(173, 141), ]  # less similar
cor(cophenetic(seg.hc), seg.dist)
table(seg.hc.segment)
seg.hc.segment <- cutree(seg.hc, k=4)     # membership vector for 4 groups
table(seg.hc.segment)
seg.summ(seg.df, seg.hc.segment)
plot(jitter(as.numeric(seg.df$gender)) ~
jitter(as.numeric(seg.df$subscribe)),
col=seg.hc.segment, yaxt="n", xaxt="n", ylab="", xlab="")
axis(1, at=c(1, 2), labels=c("Subscribe: No", "Subscribe: Yes"))
axis(2, at=c(1, 2), labels=levels(seg.df$gender))
plot(jitter(as.numeric(seg.df$gender)) ~
jitter(as.numeric(seg.df$subscribe)),
col=seg.hc.segment, yaxt="n", xaxt="n", ylab="", xlab="")
plot(jitter(as.numeric(seg.df$gender)) ~
jitter(as.numeric(seg.df$subscribe)),
col=seg.hc.segment, yaxt="n", xaxt="n", ylab="", xlab="")
axis(1, at=c(1, 2), labels=c("Subscribe: No", "Subscribe: Yes"))
axis(2, at=c(1, 2), labels=levels(seg.df$gender))
seg.df.num <- seg.df
seg.df.num$gender    <- ifelse(seg.df$gender=="Male", 0, 1)
seg.df.num$ownHome   <- ifelse(seg.df$ownHome=="ownNo", 0, 1)
seg.df.num$subscribe <- ifelse(seg.df$subscribe=="subNo", 0, 1)
head(seg.df.num)
set.seed(96743)        # because starting assignments are random
seg.k <- kmeans(seg.df.num, centers=4)
boxplot(seg.df.num$income ~ seg.k$cluster,
xlab="Income", ylab="Segment", horizontal=TRUE)
clusplot(seg.df, seg.k$cluster, color=TRUE, shade=TRUE,
labels=4, lines=0, main="K-means cluster plot")
library(astsa)
# This is a time series
plot(jj, type="o", ylab="Quarterly Earnings per Share")
plot(speech)
library(xts)
djiar = diff(log(djia$Close))[-1] # approximate returns
plot(djiar, main="DJIA Returns", type="n")
lines(djiar)
par(mfrow = c(2,1)) # set up the graphics
plot(soi, ylab="", xlab="", main="Southern Oscillation Index")
plot(rec, ylab="", xlab="", main="Recruitment")
par(mfrow=c(2,1))
plot(EQ5, main="Earthquake")
plot(EXP6, main="Explosion")
library(data.table)
library(lubridate)
revenues <- fread("ex3_revenues.csv")
revenues <- fread("ex3_revenues.csv")
library(astsa)
# This is a time series
plot(jj, type="o", ylab="Quarterly Earnings per Share")
plot(speech)
# This is a time series
plot(jj, type="o", ylab="Quarterly Earnings per Share")
plot(speech)
seg.rf <- randomForest(Segment ~ ., data=seg.df.train, ntree=3000)
library(randomForest)
set.seed(98040)
seg.rf <- randomForest(Segment ~ ., data=seg.df.train, ntree=3000)
install.packages.
install.packages('randomForest')
library(randomForest)
set.seed(98040)
seg.rf <- randomForest(Segment ~ ., data=seg.df.train, ntree=3000)

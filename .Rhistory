setwd("C:/Users/Charl/OneDrive/Documents/GitHub/DMA2")
?lm
?demo
demo(lm.glm, package = "stats", ask = TRUE)
demo(glm.vr, package = "stats", ask = TRUE)
print("okdsfnokjsfno")
print("okdsfnokjsfno")
print("Ok ln2 ")
print("Ok ln2\nokln2, ln 2 ")
print("Ok ln2/nokln2, ln 2 ")
print("Ok ln2
okln2, ln 2 ")
print("Ok ln2
okln2, ln 2 ")
getwd()
getwd()
getwd()
print("okdsfnokjsfno")
print("Ok ln2okln2, ln 2 ")
getwd()
setwd("C:/Users/Charl/OneDrive/Documents/GitHub/")
getwd()
setwd("C:/Users/Charl/OneDrive/Documents/GitHub/DMA2")
getwd()
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library("ggplot2")
library(ggplot2)
library(datasets)
summary(iris)
library(ggplot2)
library(datasets)
summary(iris)
head(iris, n= 10)
tail(iris)
install.packages("colorspace")
library(ggplot2)
install.packages("utf8")
library(ggplot2)
library(ggplot2)
library(datasets)
summary(iris)
head(iris, n= 10) # start of dataset
tail(i) # end of dataset
library(ggplot2)
library(datasets)
summary(iris)
head(iris, n= 10) # start of dataset
tail(i) # end of dataset
tail(iris) # end of dataset
plot(iris$Sepal.Length)
library(ggplot2)
library(datasets)
summary(iris)
head(iris, n= 10) # start of dataset
tail(iris) # end of dataset
plot(iris$Sepal.Length)
plot(iris$Sepal.Length)
hist(iris$Sepal.Length)
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length)
iris[1:10, "Sepal.Length"]
iris[1:10]
iris[1:10, ""]
Sepal.Length
iris[1:10, "Sepal.Length"]
iris$Sepal.Length
num
num = 7
num <- 7
num
num
num = 7
num
num <- 7
num
num
num <- 5
num
num
num = 7
num
num <- 5
num += 2
num = num + 3
num = 7
num
num <- 5
num = num + 3
num
ter"
length(name)
name <- "Walter"
name <- "Walter"
length(name)
class(num)
class(name)
name
ones = c(11,2,2,2,3,23,2,3,23,2,3,23,2)
ones
ones[1]
ones[1]
ones[0]
ones[-1]
ones[-2]
ones[-3:4]
ones[0]
<- c(1,2,3,4)
v <- c(1,2,3,4)
v[3]
v = c(1, "chelsea")
v
v = c(name = "Jeff", height = 4)
v
mat <- matrix(c(1,0,0,0,1,0,0,0,1), ncol = 3)
mat
mat <- matrix(c(1,0,0,0,1,0,0,0,1), ncol = 6)
mat <- matrix(c(1,0,0,0,1,0,0,0,1,1), ncol = )
mat <- matrix(c(1,0,0,0,1,0,0,0,1,1), ncol = 3)
mat <- matrix(c(1,0,0,0,1,0,0,0,1,1), ncol = 5)
mat <- matrix(c(1,0,0,0,1,0,0,0,1,1), ncol = 5)
mat
mat <- matrix(c(1,0,0,0,1,0,0,0,1,1,0,1), ncol = 3)
mat
seq(1,10, length = 10)
jeff = seq(1,10, length = 10)
jeff
jeff = seq(1,10, length = 5)
jeff
jef = seq(1,12, by = 2)
jef
jef = seq(1,length = 15, by = 2)
jef
rep(JOO,100)
rep("JOO",100)
rep(jef,100)
seqs > 5
seqs <- rep(1:10,10)
seqs > 5
seqs > 1
seqs => 1
seqs >= 1
seqs >= 3
any(seqs > 5)
any(seqs > 11)
all(seqs > 5)
all(seqs > 5)# checks if all value in seqs is gretar than 5
all(seqs >=1)# checks if all value in seqs is gretar than 5
our_names <- c("Chelsea", "John", "Jim", "Bianca", "Amy", "John", "Jake", "Tony", "Sam")
ifelse(our_names == "John", "J-Money", our_names)
our_names
ifelse(our_names == "John", "J-Money", our_names)
our_names = ifelse(our_names == "John", "J-Money", our_names)
our_names
which(our_names == "John")
which(our_names == "J-Money")
our_names == "John"
our_names == "J-Money"
our_names[our_names == "J-Money"]
our_names[our_names == "J-Money"]
our_names[our_names != "J-Money"]
library(ggplot2)
library(datasets)
grades = c(26, 28, 22, 23, 18, 31, 30)
grades
grades.sdev
grades.sdev()
stdev(grades)
mean(grades)
sd(grads_)
sd(grads)
sd(grades)
mode(grades)
median(grades)
ident
ident <- matrix(c(1,0,0,0,1,0,0,0,1), ncol = 3,
byrow = T)
ident
ident + 1
indent
ident
ident + 1:3
ident[1,2]
ident[1,2] <- 999
ident
t(ident)
#matrix multiplication
v %*% ident
library(ggplot2)
library(datasets)
grades = c(26, 28, 22, 23, 18, 31, 30)
mean(grades)
sd(grades)
ident <- matrix(c(1,0,0,0,1,0,0,0,1), ncol = 3,
byrow = T)
ident
ident + 1
ident + 1:3
ident[1,2] <- 999
ident
t(ident)
v <- c(1,2,3)
#matrix multiplication
v %*% ident
#matrix multiplication
v %*% ident
ident + 1:4
ident + 1:2
ident + 1:2ident[1,2] <- 999
ident + 1:3
ident[:,1] + 1:3
ident[,1] + 1:3
ident[1,] + 1:3
ident %*% t(ident)
summary(iris)
summary(ident)
summary(iris.petal)
summary(iris.Petal)
summary(iris.Sepal)
summary(iris.Sepal.Length)
mean(iris.Sepal.Length)
summary(iris[Sepal])
summary(iris[Sepal.Length])
summary(iris)
head(iris)
d <- data.grame("iris")
d <- data.frame("iris")
class(d)
d <- data.frame(ident)
class(d)
d
<- data.frame(ident)
d <- data.frame(ident)
class(d)
d
names(d) <- c("Jeff","Juff","Joff")
d
head(height)
set.seed(42) #Sets a seed to create repeatable random numbers
height <- rnorm(10,mean = 170, sd = 20) # creates 10 data points, mean 170, sd 20
weight <- rnorm(10, mean = 150, sd = 20)# creates 10 data points, mean 150, sd 20
head(height)
#height and weight are rounded to 4dp
height <- round(height, 2) # rounds height to 2dp
height
hw <- data.frame(h = height, w = weight)
head(hw)
head(hw$h)
iris$Petal
iris$Petal.Length
newguy <- c(140,100) #data.frame(height = 140, weight = 100)
hw <- rbind(hw,newguy)
hw
newguy <- c(140.123,100) #data.frame(height = 140, weight = 100)
hw <- rbind(hw,newguy)
hw
age <- rnorm(12,25,2)
hw$age <- age
hw
hw$age <- age #or cbind(hw,age)
hw
cbind(hw,age)
my_funct("Jeff")
my_funct <- function(arg){
#do Stuff
arg+1
}
my_funct("Jeff")
my_funct(2)
my_funct <- function(arg){ #function syntax
#do Stuff
return arg**2
my_funct("Jeff") #throws error since requires number
#do Stuff
return(arg**2)
my_funct <- function(arg){ #function syntax
#do Stuff
return(arg**2)
}
my_funct("Jeff") #throws error since requires number
my_funct(2)
my_funct(3)
my_funct <- function(arg = 2){ #function syntax
#do Stuff
print("Im functioning")
return(arg**2)
}
my_funct("Jeff") #throws error since requires number
my_funct(3)
my_funct()
#CLASSES---------------------------------------
histo <- hist(iris$Sepal.Length)
str(hist)
str(histo)
class(histo)
summary(histo)
a <- lm(iris$Sepal.Length~iris$Sepal.Width)
str(a)
a <- lm(iris$Sepal.Length~iris$Sepal.Width)
str(a)
# creates a linear model relating length to width
str(a)
summary(a)
plot(a)
plot(a)
plot(a)
plot(a)
plot(iris)
#Loops In R...grudgingly.
#if-----------------------------------------
if (1 == 1){
a <- TRUE
} else {
a <- FALSE
}
#else if
b <- 11
if (b%%2 == 0){
print("even")
} else if (b%%3 == 0){
print("divisible by 3")
} else {
print("crappy number")
}
x <- 2
while (x < 5){
print("hello")
x <- x + 1
}
#for-----------------------------------------
#what do you think this will output?
for (i in 1:10){
print(paste0(rep("!",i)))
}
i <- 1:20
j <- rep(NA,length(i))
#instead of...
for (n in i){
j[i] <- i*11
}
#try...
j <- i*11
#instead of...
letters <- c("a","b", "c","d","e","f","g","h","i","j","k")
vowLets <- c()
vowels <- c("a","e","i","o","u")
for (let in letters){
if (let %in% vowels){
vowLets <- c(vowLets,TRUE) #WARNING: memory inefficient
} else {
vowLets <- c(vowLets, FALSE) #WARNING: memory inefficient
}
}
#try...
vowLets2 <- ifelse(letters %in% vowels, TRUE, FALSE)
vowLets2
#apply()-------------------------------------
mat <- matrix(c(1,2,3,4,7,4,2,5,7), nrow = 3)
apply(mat,2,mean)
my_fun <- function(column){
return(max(column))
}
apply(mat,1,my_fun)
age <- round(rnorm(10,40,10)) #years
height <- round(rnorm(10,140,20)) #cm?
weight <- round(rnorm(10,170,35)) #lbs
people <- data.frame(age = age, height = height, weight = weight)
head(people)
lapply(people,mean) #note, returns a LIST
apply(peopleMAT,2,mean) #not a list!
peopleMAT <- as.matrix(people)
peopleMAT
apply(peopleMAT,2,mean) #not a list!
q1 = c(200, 70, 88, 130, 175, 89, 95, 120, 400, 55)
range = max(q1)-min(q1)
source("~/GitHub/DMA2/StatsEs2.R", echo=TRUE)
xbar = sum(q1)/length(q1)
xbar
dx = q1 - xbar #deviations
dx
out = cbind(q1,dq1)
dq1 = q1 - xbar #deviations
out = cbind(q1,dq1)
sd(q1)
x = c(35, 32, 16, 66,22,46,32)
xbar = mean(x)
dxi = x - xbar
cbind(x, dxi)
cbind(x, dxi, dxi^2)
colSums(out)
colSums(out)
colSums(out)
colSums(out)
x = c(35, 32, 16, 66,22,46,32)
xbar = mean(x)
dxi = x - xbar
out = round(cbind(x, dxi, dxi^2),2)
colSums(out)
1627.73/6
sqrt(1627.73/6)
#e2 q3
x = c( 57, 35, 61, 64, 90, 78, 60, 53, 55, 57, 71, 30)
xsorted = sort(x)
xsorted
median(x)
q1(x)
